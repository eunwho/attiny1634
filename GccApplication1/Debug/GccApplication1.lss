
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000074e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800100  00800100  000007c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b89  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000861  00000000  00000000  0000143d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000537  00000000  00000000  00001c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  000021d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055c  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ab  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002c6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_7>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_14>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_16>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	a5 34       	cpi	r26, 0x45	; 69
  88:	b2 07       	cpc	r27, r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 c2 01 	call	0x384	; 0x384 <main>
  90:	0c 94 a5 03 	jmp	0x74a	; 0x74a <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <Initial_GPIO>:
void uart_puts(const char *s) {
	while (*s) {
		send_uart(*s);
		s++;
	}
}
  98:	10 ba       	out	0x10, r1	; 16
  9a:	1c b8       	out	0x0c, r1	; 12
  9c:	63 9a       	sbi	0x0c, 3	; 12
  9e:	60 9a       	sbi	0x0c, 0	; 12
  a0:	80 e4       	ldi	r24, 0x40	; 64
  a2:	8a b9       	out	0x0a, r24	; 10
  a4:	18 b8       	out	0x08, r1	; 8
  a6:	40 9a       	sbi	0x08, 0	; 8
  a8:	6b 9a       	sbi	0x0d, 3	; 13
  aa:	08 95       	ret

000000ac <Initial_uart>:
  ac:	12 bc       	out	0x22, r1	; 34
  ae:	83 e3       	ldi	r24, 0x33	; 51
  b0:	81 bd       	out	0x21, r24	; 33
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	86 bd       	out	0x26, r24	; 38
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	85 bd       	out	0x25, r24	; 37
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	84 bd       	out	0x24, r24	; 36
  be:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <gUartRxDone>
  c2:	08 95       	ret

000000c4 <send_uart>:
  c4:	06 b4       	in	r0, 0x26	; 38
  c6:	05 fe       	sbrs	r0, 5
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <send_uart>
  ca:	80 bd       	out	0x20, r24	; 32
  cc:	08 95       	ret

000000ce <calcSensScaleOffset>:
#if	(ID_0x51 | ID_0x61)
void calcSensScaleOffset(){
	float x1,x2,y2,y1;
	
	y2 = SENS_HIGH; y1 = SENS_LOW ; x2 = ADC_HIGH ; x1 = ADC_LOW;
	sensScale = ( y2 - y1 ) / ( x2 - x1 );
  ce:	81 ea       	ldi	r24, 0xA1	; 161
  d0:	90 ea       	ldi	r25, 0xA0	; 160
  d2:	a0 ea       	ldi	r26, 0xA0	; 160
  d4:	bc e3       	ldi	r27, 0x3C	; 60
  d6:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <sensScale>
  da:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <sensScale+0x1>
  de:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <sensScale+0x2>
  e2:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <sensScale+0x3>
	sensOffset = ( y1 * x2 - y2 * x1 ) / ( x2 - x1 );
  e6:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <sensOffset>
  ea:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <sensOffset+0x1>
  ee:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <sensOffset+0x2>
  f2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <sensOffset+0x3>
  f6:	08 95       	ret

000000f8 <calcSens>:
}

float calcSens(unsigned int arg1){
	return sensScale * arg1 + sensOffset;
  f8:	bc 01       	movw	r22, r24
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 80 02 	call	0x500	; 0x500 <__floatunsisf>
 102:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <sensScale>
 106:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <sensScale+0x1>
 10a:	40 91 43 01 	lds	r20, 0x0143	; 0x800143 <sensScale+0x2>
 10e:	50 91 44 01 	lds	r21, 0x0144	; 0x800144 <sensScale+0x3>
 112:	0e 94 0e 03 	call	0x61c	; 0x61c <__mulsf3>
 116:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <sensOffset>
 11a:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <sensOffset+0x1>
 11e:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <sensOffset+0x2>
 122:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <sensOffset+0x3>
 126:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__addsf3>
}
 12a:	08 95       	ret

0000012c <Initial_ADC>:
void Initial_ADC(void)
{
	// ADMUX = (1 << REFS0);
	//	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);      // set prescaler to 64
	//ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0) | (1<<ADIE ) | (1 << ADSC) | (1 << ADEN) | (1<< ADATE);		// irq enabled
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0) | (1<<ADIE ) | (1 << ADSC) | (1 << ADEN) | (1<< ADATE);		// irq enabled
 12c:	8e ee       	ldi	r24, 0xEE	; 238
 12e:	83 b9       	out	0x03, r24	; 3
	ADCSRB = (1<<ADLAR );	// ADCH, ADCL are left adjusted
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	82 b9       	out	0x02, r24	; 2
	DIDR0 = 0x38;
 134:	88 e3       	ldi	r24, 0x38	; 56
 136:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
	ADMUX = ADC_CHAN;	// AREF use, select adc1
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	84 b9       	out	0x04, r24	; 4
 13e:	08 95       	ret

00000140 <__vector_14>:
}

ISR(ADC_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
	adcResult = ADCH ;
 14e:	81 b1       	in	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <adcResult+0x1>
 156:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <adcResult>
	ADCSRA |= (1<<ADSC);
 15a:	1e 9a       	sbi	0x03, 6	; 3
}
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_16>:
#endif

ISR(USART0_RX_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
	static int i,flagLed;
	unsigned char inData;
	static unsigned char gUartIndex=0;
	static unsigned char flagStx = RESET;
	
	inData = UDR0;
 184:	90 b5       	in	r25, 0x20	; 32
	if(flagStx == RESET){
 186:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flagStx.2122>
 18a:	81 11       	cpse	r24, r1
 18c:	0b c0       	rjmp	.+22     	; 0x1a4 <__vector_16+0x3a>
		if(inData == 0x02){
 18e:	92 30       	cpi	r25, 0x02	; 2
 190:	09 f0       	breq	.+2      	; 0x194 <__vector_16+0x2a>
 192:	40 c0       	rjmp	.+128    	; 0x214 <__vector_16+0xaa>
			gUartIndex = 0;
			gUartRxBuffer[gUartIndex++] = inData;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <gUartIndex.2121>
 19a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <gUartRxBuffer>
			flagStx = SET;
 19e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flagStx.2122>
 1a2:	38 c0       	rjmp	.+112    	; 0x214 <__vector_16+0xaa>
		}
	}
	else if(flagStx == SET){
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	b1 f5       	brne	.+108    	; 0x214 <__vector_16+0xaa>
		gUartRxBuffer[gUartIndex++] = inData;
 1a8:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <gUartIndex.2121>
 1ac:	8e 0f       	add	r24, r30
 1ae:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <gUartIndex.2121>
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	e3 5e       	subi	r30, 0xE3	; 227
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	90 83       	st	Z, r25
		if(inData == 0x03){
 1ba:	93 30       	cpi	r25, 0x03	; 3
 1bc:	59 f5       	brne	.+86     	; 0x214 <__vector_16+0xaa>
			flagLed = ( flagLed ) ? 0 : 1;
 1be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <flagLed.2119>
 1c2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <flagLed.2119+0x1>
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	00 97       	sbiw	r24, 0x00	; 0
 1cc:	11 f0       	breq	.+4      	; 0x1d2 <__vector_16+0x68>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <flagLed.2119+0x1>
 1d6:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <flagLed.2119>
			if( flagLed ){ LED_ON; }
 1da:	89 2b       	or	r24, r25
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <__vector_16+0x78>
 1de:	6b 98       	cbi	0x0d, 3	; 13
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <__vector_16+0x7a>
			else {			LED_OFF;}
 1e2:	6b 9a       	sbi	0x0d, 3	; 13

			gflagConnect = SET;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <gflagConnect>
			flagStx = RESET;
 1ea:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <flagStx.2122>
 1ee:	ed e1       	ldi	r30, 0x1D	; 29
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	a9 e0       	ldi	r26, 0x09	; 9
 1f4:	b1 e0       	ldi	r27, 0x01	; 1
 1f6:	23 e2       	ldi	r18, 0x23	; 35
 1f8:	31 e0       	ldi	r19, 0x01	; 1
			for( i = 0 ; i < 6 ; i++) gUartTxBuffer[i] = gUartRxBuffer[i];
 1fa:	81 91       	ld	r24, Z+
 1fc:	8d 93       	st	X+, r24
 1fe:	e2 17       	cp	r30, r18
 200:	f3 07       	cpc	r31, r19
 202:	d9 f7       	brne	.-10     	; 0x1fa <__vector_16+0x90>
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <i.2118+0x1>
 20c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <i.2118>
			gUartIndex = 0;
 210:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <gUartIndex.2121>
		}
	}
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <Initial_Timer>:


void Initial_Timer(void)
{
	TCCR1B = 0x0C; 
 22e:	8c e0       	ldi	r24, 0x0C	; 12
 230:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__EEPROM_REGION_LENGTH__+0x7f0071>
	OCR1A = 30;	// 1ms
 234:	8e e1       	ldi	r24, 0x1E	; 30
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__EEPROM_REGION_LENGTH__+0x7f006d>
 23c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
	TIMSK = 0x40; 
 240:	80 e4       	ldi	r24, 0x40	; 64
 242:	8a bf       	out	0x3a, r24	; 58
 244:	08 95       	ret

00000246 <__vector_7>:
}

ISR(TIMER1_COMPA_vect)	//1msec
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
	static  unsigned int gCounter = 0;
	static unsigned char test = 0;

	if(gCounter >= 500){	// 500msec
 256:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <gCounter.2134>
 25a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <gCounter.2134+0x1>
 25e:	84 3f       	cpi	r24, 0xF4	; 244
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	92 07       	cpc	r25, r18
 264:	98 f0       	brcs	.+38     	; 0x28c <__vector_7+0x46>
		if(gflagConnect == RESET){
 266:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <gflagConnect>
 26a:	81 11       	cpse	r24, r1
 26c:	0a c0       	rjmp	.+20     	; 0x282 <__vector_7+0x3c>
			if(test == 0){
 26e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 272:	81 11       	cpse	r24, r1
 274:	04 c0       	rjmp	.+8      	; 0x27e <__vector_7+0x38>
				//LED_ON;
				test = 1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 27c:	02 c0       	rjmp	.+4      	; 0x282 <__vector_7+0x3c>
			}
			else{
				//LED_OFF;
				test = 0;				
 27e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			}
		}
		gCounter = 0;
 282:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <gCounter.2134+0x1>
 286:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <gCounter.2134>
 28a:	05 c0       	rjmp	.+10     	; 0x296 <__vector_7+0x50>
	}
	else gCounter++;
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <gCounter.2134+0x1>
 292:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <gCounter.2134>
}
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <rs485Send>:

void rs485Send( ){
 2a6:	8f 92       	push	r8
 2a8:	9f 92       	push	r9
 2aa:	af 92       	push	r10
 2ac:	bf 92       	push	r11
 2ae:	cf 92       	push	r12
 2b0:	df 92       	push	r13
 2b2:	ef 92       	push	r14
 2b4:	ff 92       	push	r15
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29

	int i;
	unsigned long input;

	RS485_RX_EN;
 2be:	40 98       	cbi	0x08, 0	; 8

#if READ_ADC
	input = (unsigned long)(adcResult * 10);
#else
	if (ID_ADDR == 0x51)		input = (unsigned long)(calcSens( adcResult) / 100);
	else if(ID_ADDR == 0x61 )   input = (unsigned long)(calcSens(adcResult ) * 10);
 2c0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <adcResult>
 2c4:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <adcResult+0x1>
 2c8:	0e 94 7c 00 	call	0xf8	; 0xf8 <calcSens>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	40 e2       	ldi	r20, 0x20	; 32
 2d2:	51 e4       	ldi	r21, 0x41	; 65
 2d4:	0e 94 0e 03 	call	0x61c	; 0x61c <__mulsf3>
 2d8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fixunssfsi>
 2dc:	4b 01       	movw	r8, r22
 2de:	5c 01       	movw	r10, r24
	else                        input = 1;	
#endif

#if (ID_0x51 | ID_0x61 )
	gUartTxBuffer[0] = 0x02;
 2e0:	c9 e0       	ldi	r28, 0x09	; 9
 2e2:	d1 e0       	ldi	r29, 0x01	; 1
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	88 83       	st	Y, r24
	gUartTxBuffer[1] = ID_ADDR;
 2e8:	81 e6       	ldi	r24, 0x61	; 97
 2ea:	89 83       	std	Y+1, r24	; 0x01
	gUartTxBuffer[2] = 'A';	
 2ec:	81 e4       	ldi	r24, 0x41	; 65
 2ee:	8a 83       	std	Y+2, r24	; 0x02
	gUartTxBuffer[3] = ((unsigned char)(input / 1000))			+ 0x30;
 2f0:	c5 01       	movw	r24, r10
 2f2:	b4 01       	movw	r22, r8
 2f4:	28 ee       	ldi	r18, 0xE8	; 232
 2f6:	33 e0       	ldi	r19, 0x03	; 3
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	0e 94 83 03 	call	0x706	; 0x706 <__udivmodsi4>
 300:	20 5d       	subi	r18, 0xD0	; 208
 302:	2b 83       	std	Y+3, r18	; 0x03
	gUartTxBuffer[4] = ((unsigned char)((input % 1000)/100))	+ 0x30;
 304:	0f 2e       	mov	r0, r31
 306:	f4 e6       	ldi	r31, 0x64	; 100
 308:	cf 2e       	mov	r12, r31
 30a:	d1 2c       	mov	r13, r1
 30c:	e1 2c       	mov	r14, r1
 30e:	f1 2c       	mov	r15, r1
 310:	f0 2d       	mov	r31, r0
 312:	a7 01       	movw	r20, r14
 314:	96 01       	movw	r18, r12
 316:	0e 94 83 03 	call	0x706	; 0x706 <__udivmodsi4>
 31a:	20 5d       	subi	r18, 0xD0	; 208
 31c:	2c 83       	std	Y+4, r18	; 0x04
	gUartTxBuffer[5] = ((unsigned char)((input % 100 ) /10))	+ 0x30;
 31e:	c5 01       	movw	r24, r10
 320:	b4 01       	movw	r22, r8
 322:	a7 01       	movw	r20, r14
 324:	96 01       	movw	r18, r12
 326:	0e 94 83 03 	call	0x706	; 0x706 <__udivmodsi4>
 32a:	2a e0       	ldi	r18, 0x0A	; 10
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	0e 94 83 03 	call	0x706	; 0x706 <__udivmodsi4>
 336:	20 5d       	subi	r18, 0xD0	; 208
 338:	2d 83       	std	Y+5, r18	; 0x05
	gUartTxBuffer[6] = (unsigned char)( (input % 100)%10 + 0x30);
 33a:	60 5d       	subi	r22, 0xD0	; 208
 33c:	6e 83       	std	Y+6, r22	; 0x06
	gUartTxBuffer[7] = 0x03;
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	8f 83       	std	Y+7, r24	; 0x07
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 342:	8f ea       	ldi	r24, 0xAF	; 175
 344:	96 e3       	ldi	r25, 0x36	; 54
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <rs485Send+0xa0>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <rs485Send+0xa6>
 34c:	00 00       	nop
 34e:	01 e1       	ldi	r16, 0x11	; 17
 350:	11 e0       	ldi	r17, 0x01	; 1
#endif

	_delay_ms(7);
	for( i = 0 ; i < 8 ; i++){
		send_uart( gUartTxBuffer[i]);
 352:	89 91       	ld	r24, Y+
 354:	0e 94 62 00 	call	0xc4	; 0xc4 <send_uart>
	gUartTxBuffer[6] = (unsigned char)( (input % 100)%10 + 0x30);
	gUartTxBuffer[7] = 0x03;
#endif

	_delay_ms(7);
	for( i = 0 ; i < 8 ; i++){
 358:	c0 17       	cp	r28, r16
 35a:	d1 07       	cpc	r29, r17
 35c:	d1 f7       	brne	.-12     	; 0x352 <rs485Send+0xac>
 35e:	8f e1       	ldi	r24, 0x1F	; 31
 360:	9e e4       	ldi	r25, 0x4E	; 78
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <rs485Send+0xbc>
 366:	00 c0       	rjmp	.+0      	; 0x368 <rs485Send+0xc2>
 368:	00 00       	nop
		send_uart( gUartTxBuffer[i]);
	}
	_delay_ms(10);
}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	df 90       	pop	r13
 378:	cf 90       	pop	r12
 37a:	bf 90       	pop	r11
 37c:	af 90       	pop	r10
 37e:	9f 90       	pop	r9
 380:	8f 90       	pop	r8
 382:	08 95       	ret

00000384 <main>:

int main(void)
{

	//_delay_ms(500);
	Initial_GPIO();
 384:	0e 94 4c 00 	call	0x98	; 0x98 <Initial_GPIO>
	Initial_uart();
 388:	0e 94 56 00 	call	0xac	; 0xac <Initial_uart>
	Initial_Timer();
 38c:	0e 94 17 01 	call	0x22e	; 0x22e <Initial_Timer>

#if (ID_0x51 | ID_0x61)
	Initial_ADC();
 390:	0e 94 96 00 	call	0x12c	; 0x12c <Initial_ADC>
	calcSensScaleOffset();   // get scale and offset for calc sensor value
 394:	0e 94 67 00 	call	0xce	; 0xce <calcSensScaleOffset>
#endif
	
	RS485_RX_EN;
 398:	40 98       	cbi	0x08, 0	; 8
	gflagConnect = RESET;
 39a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <gflagConnect>
	sei();
 39e:	78 94       	sei
	RS485_TX_EN;
 3a0:	40 9a       	sbi	0x08, 0	; 8
	while(1){
		if( gflagConnect ){
			gflagConnect = 0;
			if(( gUartTxBuffer[2] == 'E') && (gUartTxBuffer[1] == ID_ADDR)){
 3a2:	c9 e0       	ldi	r28, 0x09	; 9
 3a4:	d1 e0       	ldi	r29, 0x01	; 1
	RS485_RX_EN;
	gflagConnect = RESET;
	sei();
	RS485_TX_EN;
	while(1){
		if( gflagConnect ){
 3a6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <gflagConnect>
 3aa:	88 23       	and	r24, r24
 3ac:	59 f0       	breq	.+22     	; 0x3c4 <main+0x40>
			gflagConnect = 0;
 3ae:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <gflagConnect>
			if(( gUartTxBuffer[2] == 'E') && (gUartTxBuffer[1] == ID_ADDR)){
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	85 34       	cpi	r24, 0x45	; 69
 3b6:	b9 f7       	brne	.-18     	; 0x3a6 <main+0x22>
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
 3ba:	81 36       	cpi	r24, 0x61	; 97
 3bc:	a1 f7       	brne	.-24     	; 0x3a6 <main+0x22>
				rs485Send( );
 3be:	0e 94 53 01 	call	0x2a6	; 0x2a6 <rs485Send>
 3c2:	f1 cf       	rjmp	.-30     	; 0x3a6 <main+0x22>
			}
		} else {
			RS485_TX_EN;
 3c4:	40 9a       	sbi	0x08, 0	; 8
 3c6:	ef cf       	rjmp	.-34     	; 0x3a6 <main+0x22>

000003c8 <__subsf3>:
 3c8:	50 58       	subi	r21, 0x80	; 128

000003ca <__addsf3>:
 3ca:	bb 27       	eor	r27, r27
 3cc:	aa 27       	eor	r26, r26
 3ce:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__addsf3x>
 3d2:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_round>
 3d6:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscA>
 3da:	38 f0       	brcs	.+14     	; 0x3ea <__addsf3+0x20>
 3dc:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_pscB>
 3e0:	20 f0       	brcs	.+8      	; 0x3ea <__addsf3+0x20>
 3e2:	39 f4       	brne	.+14     	; 0x3f2 <__addsf3+0x28>
 3e4:	9f 3f       	cpi	r25, 0xFF	; 255
 3e6:	19 f4       	brne	.+6      	; 0x3ee <__addsf3+0x24>
 3e8:	26 f4       	brtc	.+8      	; 0x3f2 <__addsf3+0x28>
 3ea:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_nan>
 3ee:	0e f4       	brtc	.+2      	; 0x3f2 <__addsf3+0x28>
 3f0:	e0 95       	com	r30
 3f2:	e7 fb       	bst	r30, 7
 3f4:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_inf>

000003f8 <__addsf3x>:
 3f8:	e9 2f       	mov	r30, r25
 3fa:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fp_split3>
 3fe:	58 f3       	brcs	.-42     	; 0x3d6 <__addsf3+0xc>
 400:	ba 17       	cp	r27, r26
 402:	62 07       	cpc	r22, r18
 404:	73 07       	cpc	r23, r19
 406:	84 07       	cpc	r24, r20
 408:	95 07       	cpc	r25, r21
 40a:	20 f0       	brcs	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40c:	79 f4       	brne	.+30     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 40e:	a6 f5       	brtc	.+104    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 410:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_zero>
 414:	0e f4       	brtc	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	e0 95       	com	r30
 418:	0b 2e       	mov	r0, r27
 41a:	ba 2f       	mov	r27, r26
 41c:	a0 2d       	mov	r26, r0
 41e:	0b 01       	movw	r0, r22
 420:	b9 01       	movw	r22, r18
 422:	90 01       	movw	r18, r0
 424:	0c 01       	movw	r0, r24
 426:	ca 01       	movw	r24, r20
 428:	a0 01       	movw	r20, r0
 42a:	11 24       	eor	r1, r1
 42c:	ff 27       	eor	r31, r31
 42e:	59 1b       	sub	r21, r25
 430:	99 f0       	breq	.+38     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 432:	59 3f       	cpi	r21, 0xF9	; 249
 434:	50 f4       	brcc	.+20     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 436:	50 3e       	cpi	r21, 0xE0	; 224
 438:	68 f1       	brcs	.+90     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 43a:	1a 16       	cp	r1, r26
 43c:	f0 40       	sbci	r31, 0x00	; 0
 43e:	a2 2f       	mov	r26, r18
 440:	23 2f       	mov	r18, r19
 442:	34 2f       	mov	r19, r20
 444:	44 27       	eor	r20, r20
 446:	58 5f       	subi	r21, 0xF8	; 248
 448:	f3 cf       	rjmp	.-26     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 44a:	46 95       	lsr	r20
 44c:	37 95       	ror	r19
 44e:	27 95       	ror	r18
 450:	a7 95       	ror	r26
 452:	f0 40       	sbci	r31, 0x00	; 0
 454:	53 95       	inc	r21
 456:	c9 f7       	brne	.-14     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 458:	7e f4       	brtc	.+30     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 45a:	1f 16       	cp	r1, r31
 45c:	ba 0b       	sbc	r27, r26
 45e:	62 0b       	sbc	r22, r18
 460:	73 0b       	sbc	r23, r19
 462:	84 0b       	sbc	r24, r20
 464:	ba f0       	brmi	.+46     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 466:	91 50       	subi	r25, 0x01	; 1
 468:	a1 f0       	breq	.+40     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 46a:	ff 0f       	add	r31, r31
 46c:	bb 1f       	adc	r27, r27
 46e:	66 1f       	adc	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	88 1f       	adc	r24, r24
 474:	c2 f7       	brpl	.-16     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 476:	0e c0       	rjmp	.+28     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 478:	ba 0f       	add	r27, r26
 47a:	62 1f       	adc	r22, r18
 47c:	73 1f       	adc	r23, r19
 47e:	84 1f       	adc	r24, r20
 480:	48 f4       	brcc	.+18     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 482:	87 95       	ror	r24
 484:	77 95       	ror	r23
 486:	67 95       	ror	r22
 488:	b7 95       	ror	r27
 48a:	f7 95       	ror	r31
 48c:	9e 3f       	cpi	r25, 0xFE	; 254
 48e:	08 f0       	brcs	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 490:	b0 cf       	rjmp	.-160    	; 0x3f2 <__addsf3+0x28>
 492:	93 95       	inc	r25
 494:	88 0f       	add	r24, r24
 496:	08 f0       	brcs	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	99 27       	eor	r25, r25
 49a:	ee 0f       	add	r30, r30
 49c:	97 95       	ror	r25
 49e:	87 95       	ror	r24
 4a0:	08 95       	ret

000004a2 <__fixunssfsi>:
 4a2:	0e 94 ed 02 	call	0x5da	; 0x5da <__fp_splitA>
 4a6:	88 f0       	brcs	.+34     	; 0x4ca <__fixunssfsi+0x28>
 4a8:	9f 57       	subi	r25, 0x7F	; 127
 4aa:	98 f0       	brcs	.+38     	; 0x4d2 <__fixunssfsi+0x30>
 4ac:	b9 2f       	mov	r27, r25
 4ae:	99 27       	eor	r25, r25
 4b0:	b7 51       	subi	r27, 0x17	; 23
 4b2:	b0 f0       	brcs	.+44     	; 0x4e0 <__fixunssfsi+0x3e>
 4b4:	e1 f0       	breq	.+56     	; 0x4ee <__fixunssfsi+0x4c>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	88 1f       	adc	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	1a f0       	brmi	.+6      	; 0x4c6 <__fixunssfsi+0x24>
 4c0:	ba 95       	dec	r27
 4c2:	c9 f7       	brne	.-14     	; 0x4b6 <__fixunssfsi+0x14>
 4c4:	14 c0       	rjmp	.+40     	; 0x4ee <__fixunssfsi+0x4c>
 4c6:	b1 30       	cpi	r27, 0x01	; 1
 4c8:	91 f0       	breq	.+36     	; 0x4ee <__fixunssfsi+0x4c>
 4ca:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_zero>
 4ce:	b1 e0       	ldi	r27, 0x01	; 1
 4d0:	08 95       	ret
 4d2:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_zero>
 4d6:	67 2f       	mov	r22, r23
 4d8:	78 2f       	mov	r23, r24
 4da:	88 27       	eor	r24, r24
 4dc:	b8 5f       	subi	r27, 0xF8	; 248
 4de:	39 f0       	breq	.+14     	; 0x4ee <__fixunssfsi+0x4c>
 4e0:	b9 3f       	cpi	r27, 0xF9	; 249
 4e2:	cc f3       	brlt	.-14     	; 0x4d6 <__fixunssfsi+0x34>
 4e4:	86 95       	lsr	r24
 4e6:	77 95       	ror	r23
 4e8:	67 95       	ror	r22
 4ea:	b3 95       	inc	r27
 4ec:	d9 f7       	brne	.-10     	; 0x4e4 <__fixunssfsi+0x42>
 4ee:	3e f4       	brtc	.+14     	; 0x4fe <__fixunssfsi+0x5c>
 4f0:	90 95       	com	r25
 4f2:	80 95       	com	r24
 4f4:	70 95       	com	r23
 4f6:	61 95       	neg	r22
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	8f 4f       	sbci	r24, 0xFF	; 255
 4fc:	9f 4f       	sbci	r25, 0xFF	; 255
 4fe:	08 95       	ret

00000500 <__floatunsisf>:
 500:	e8 94       	clt
 502:	09 c0       	rjmp	.+18     	; 0x516 <__floatsisf+0x12>

00000504 <__floatsisf>:
 504:	97 fb       	bst	r25, 7
 506:	3e f4       	brtc	.+14     	; 0x516 <__floatsisf+0x12>
 508:	90 95       	com	r25
 50a:	80 95       	com	r24
 50c:	70 95       	com	r23
 50e:	61 95       	neg	r22
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	8f 4f       	sbci	r24, 0xFF	; 255
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	99 23       	and	r25, r25
 518:	a9 f0       	breq	.+42     	; 0x544 <__floatsisf+0x40>
 51a:	f9 2f       	mov	r31, r25
 51c:	96 e9       	ldi	r25, 0x96	; 150
 51e:	bb 27       	eor	r27, r27
 520:	93 95       	inc	r25
 522:	f6 95       	lsr	r31
 524:	87 95       	ror	r24
 526:	77 95       	ror	r23
 528:	67 95       	ror	r22
 52a:	b7 95       	ror	r27
 52c:	f1 11       	cpse	r31, r1
 52e:	f8 cf       	rjmp	.-16     	; 0x520 <__floatsisf+0x1c>
 530:	fa f4       	brpl	.+62     	; 0x570 <__floatsisf+0x6c>
 532:	bb 0f       	add	r27, r27
 534:	11 f4       	brne	.+4      	; 0x53a <__floatsisf+0x36>
 536:	60 ff       	sbrs	r22, 0
 538:	1b c0       	rjmp	.+54     	; 0x570 <__floatsisf+0x6c>
 53a:	6f 5f       	subi	r22, 0xFF	; 255
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	8f 4f       	sbci	r24, 0xFF	; 255
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	16 c0       	rjmp	.+44     	; 0x570 <__floatsisf+0x6c>
 544:	88 23       	and	r24, r24
 546:	11 f0       	breq	.+4      	; 0x54c <__floatsisf+0x48>
 548:	96 e9       	ldi	r25, 0x96	; 150
 54a:	11 c0       	rjmp	.+34     	; 0x56e <__floatsisf+0x6a>
 54c:	77 23       	and	r23, r23
 54e:	21 f0       	breq	.+8      	; 0x558 <__floatsisf+0x54>
 550:	9e e8       	ldi	r25, 0x8E	; 142
 552:	87 2f       	mov	r24, r23
 554:	76 2f       	mov	r23, r22
 556:	05 c0       	rjmp	.+10     	; 0x562 <__floatsisf+0x5e>
 558:	66 23       	and	r22, r22
 55a:	71 f0       	breq	.+28     	; 0x578 <__floatsisf+0x74>
 55c:	96 e8       	ldi	r25, 0x86	; 134
 55e:	86 2f       	mov	r24, r22
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	2a f0       	brmi	.+10     	; 0x570 <__floatsisf+0x6c>
 566:	9a 95       	dec	r25
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	da f7       	brpl	.-10     	; 0x566 <__floatsisf+0x62>
 570:	88 0f       	add	r24, r24
 572:	96 95       	lsr	r25
 574:	87 95       	ror	r24
 576:	97 f9       	bld	r25, 7
 578:	08 95       	ret

0000057a <__fp_inf>:
 57a:	97 f9       	bld	r25, 7
 57c:	9f 67       	ori	r25, 0x7F	; 127
 57e:	80 e8       	ldi	r24, 0x80	; 128
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	08 95       	ret

00000586 <__fp_nan>:
 586:	9f ef       	ldi	r25, 0xFF	; 255
 588:	80 ec       	ldi	r24, 0xC0	; 192
 58a:	08 95       	ret

0000058c <__fp_pscA>:
 58c:	00 24       	eor	r0, r0
 58e:	0a 94       	dec	r0
 590:	16 16       	cp	r1, r22
 592:	17 06       	cpc	r1, r23
 594:	18 06       	cpc	r1, r24
 596:	09 06       	cpc	r0, r25
 598:	08 95       	ret

0000059a <__fp_pscB>:
 59a:	00 24       	eor	r0, r0
 59c:	0a 94       	dec	r0
 59e:	12 16       	cp	r1, r18
 5a0:	13 06       	cpc	r1, r19
 5a2:	14 06       	cpc	r1, r20
 5a4:	05 06       	cpc	r0, r21
 5a6:	08 95       	ret

000005a8 <__fp_round>:
 5a8:	09 2e       	mov	r0, r25
 5aa:	03 94       	inc	r0
 5ac:	00 0c       	add	r0, r0
 5ae:	11 f4       	brne	.+4      	; 0x5b4 <__fp_round+0xc>
 5b0:	88 23       	and	r24, r24
 5b2:	52 f0       	brmi	.+20     	; 0x5c8 <__fp_round+0x20>
 5b4:	bb 0f       	add	r27, r27
 5b6:	40 f4       	brcc	.+16     	; 0x5c8 <__fp_round+0x20>
 5b8:	bf 2b       	or	r27, r31
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <__fp_round+0x18>
 5bc:	60 ff       	sbrs	r22, 0
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__fp_round+0x20>
 5c0:	6f 5f       	subi	r22, 0xFF	; 255
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	8f 4f       	sbci	r24, 0xFF	; 255
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	08 95       	ret

000005ca <__fp_split3>:
 5ca:	57 fd       	sbrc	r21, 7
 5cc:	90 58       	subi	r25, 0x80	; 128
 5ce:	44 0f       	add	r20, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	59 f0       	breq	.+22     	; 0x5ea <__fp_splitA+0x10>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	71 f0       	breq	.+28     	; 0x5f4 <__fp_splitA+0x1a>
 5d8:	47 95       	ror	r20

000005da <__fp_splitA>:
 5da:	88 0f       	add	r24, r24
 5dc:	97 fb       	bst	r25, 7
 5de:	99 1f       	adc	r25, r25
 5e0:	61 f0       	breq	.+24     	; 0x5fa <__fp_splitA+0x20>
 5e2:	9f 3f       	cpi	r25, 0xFF	; 255
 5e4:	79 f0       	breq	.+30     	; 0x604 <__fp_splitA+0x2a>
 5e6:	87 95       	ror	r24
 5e8:	08 95       	ret
 5ea:	12 16       	cp	r1, r18
 5ec:	13 06       	cpc	r1, r19
 5ee:	14 06       	cpc	r1, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	f2 cf       	rjmp	.-28     	; 0x5d8 <__fp_split3+0xe>
 5f4:	46 95       	lsr	r20
 5f6:	f1 df       	rcall	.-30     	; 0x5da <__fp_splitA>
 5f8:	08 c0       	rjmp	.+16     	; 0x60a <__fp_splitA+0x30>
 5fa:	16 16       	cp	r1, r22
 5fc:	17 06       	cpc	r1, r23
 5fe:	18 06       	cpc	r1, r24
 600:	99 1f       	adc	r25, r25
 602:	f1 cf       	rjmp	.-30     	; 0x5e6 <__fp_splitA+0xc>
 604:	86 95       	lsr	r24
 606:	71 05       	cpc	r23, r1
 608:	61 05       	cpc	r22, r1
 60a:	08 94       	sec
 60c:	08 95       	ret

0000060e <__fp_zero>:
 60e:	e8 94       	clt

00000610 <__fp_szero>:
 610:	bb 27       	eor	r27, r27
 612:	66 27       	eor	r22, r22
 614:	77 27       	eor	r23, r23
 616:	cb 01       	movw	r24, r22
 618:	97 f9       	bld	r25, 7
 61a:	08 95       	ret

0000061c <__mulsf3>:
 61c:	0e 94 20 03 	call	0x640	; 0x640 <__mulsf3x>
 620:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_round>
 624:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscA>
 628:	38 f0       	brcs	.+14     	; 0x638 <__mulsf3+0x1c>
 62a:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_pscB>
 62e:	20 f0       	brcs	.+8      	; 0x638 <__mulsf3+0x1c>
 630:	95 23       	and	r25, r21
 632:	11 f0       	breq	.+4      	; 0x638 <__mulsf3+0x1c>
 634:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_inf>
 638:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_nan>
 63c:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_szero>

00000640 <__mulsf3x>:
 640:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fp_split3>
 644:	78 f3       	brcs	.-34     	; 0x624 <__mulsf3+0x8>

00000646 <__mulsf3_pse>:
 646:	99 23       	and	r25, r25
 648:	c9 f3       	breq	.-14     	; 0x63c <__mulsf3+0x20>
 64a:	55 23       	and	r21, r21
 64c:	b9 f3       	breq	.-18     	; 0x63c <__mulsf3+0x20>
 64e:	95 0f       	add	r25, r21
 650:	50 e0       	ldi	r21, 0x00	; 0
 652:	55 1f       	adc	r21, r21
 654:	aa 27       	eor	r26, r26
 656:	ee 27       	eor	r30, r30
 658:	ff 27       	eor	r31, r31
 65a:	bb 27       	eor	r27, r27
 65c:	00 24       	eor	r0, r0
 65e:	08 94       	sec
 660:	67 95       	ror	r22
 662:	20 f4       	brcc	.+8      	; 0x66c <__mulsf3_pse+0x26>
 664:	e2 0f       	add	r30, r18
 666:	f3 1f       	adc	r31, r19
 668:	b4 1f       	adc	r27, r20
 66a:	0a 1e       	adc	r0, r26
 66c:	22 0f       	add	r18, r18
 66e:	33 1f       	adc	r19, r19
 670:	44 1f       	adc	r20, r20
 672:	aa 1f       	adc	r26, r26
 674:	66 95       	lsr	r22
 676:	a9 f7       	brne	.-22     	; 0x662 <__mulsf3_pse+0x1c>
 678:	77 95       	ror	r23
 67a:	30 f4       	brcc	.+12     	; 0x688 <__mulsf3_pse+0x42>
 67c:	f3 0f       	add	r31, r19
 67e:	b4 1f       	adc	r27, r20
 680:	0a 1e       	adc	r0, r26
 682:	12 1e       	adc	r1, r18
 684:	08 f4       	brcc	.+2      	; 0x688 <__mulsf3_pse+0x42>
 686:	63 95       	inc	r22
 688:	33 0f       	add	r19, r19
 68a:	44 1f       	adc	r20, r20
 68c:	aa 1f       	adc	r26, r26
 68e:	22 1f       	adc	r18, r18
 690:	76 95       	lsr	r23
 692:	99 f7       	brne	.-26     	; 0x67a <__mulsf3_pse+0x34>
 694:	87 95       	ror	r24
 696:	20 f4       	brcc	.+8      	; 0x6a0 <__mulsf3_pse+0x5a>
 698:	b4 0f       	add	r27, r20
 69a:	0a 1e       	adc	r0, r26
 69c:	12 1e       	adc	r1, r18
 69e:	63 1f       	adc	r22, r19
 6a0:	44 0f       	add	r20, r20
 6a2:	aa 1f       	adc	r26, r26
 6a4:	22 1f       	adc	r18, r18
 6a6:	33 1f       	adc	r19, r19
 6a8:	86 95       	lsr	r24
 6aa:	a9 f7       	brne	.-22     	; 0x696 <__mulsf3_pse+0x50>
 6ac:	86 2f       	mov	r24, r22
 6ae:	71 2d       	mov	r23, r1
 6b0:	60 2d       	mov	r22, r0
 6b2:	11 24       	eor	r1, r1
 6b4:	9f 57       	subi	r25, 0x7F	; 127
 6b6:	50 40       	sbci	r21, 0x00	; 0
 6b8:	9a f0       	brmi	.+38     	; 0x6e0 <__mulsf3_pse+0x9a>
 6ba:	f1 f0       	breq	.+60     	; 0x6f8 <__mulsf3_pse+0xb2>
 6bc:	88 23       	and	r24, r24
 6be:	4a f0       	brmi	.+18     	; 0x6d2 <__mulsf3_pse+0x8c>
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	bb 1f       	adc	r27, r27
 6c6:	66 1f       	adc	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	91 50       	subi	r25, 0x01	; 1
 6ce:	50 40       	sbci	r21, 0x00	; 0
 6d0:	a9 f7       	brne	.-22     	; 0x6bc <__mulsf3_pse+0x76>
 6d2:	9e 3f       	cpi	r25, 0xFE	; 254
 6d4:	51 05       	cpc	r21, r1
 6d6:	80 f0       	brcs	.+32     	; 0x6f8 <__mulsf3_pse+0xb2>
 6d8:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_inf>
 6dc:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_szero>
 6e0:	5f 3f       	cpi	r21, 0xFF	; 255
 6e2:	e4 f3       	brlt	.-8      	; 0x6dc <__mulsf3_pse+0x96>
 6e4:	98 3e       	cpi	r25, 0xE8	; 232
 6e6:	d4 f3       	brlt	.-12     	; 0x6dc <__mulsf3_pse+0x96>
 6e8:	86 95       	lsr	r24
 6ea:	77 95       	ror	r23
 6ec:	67 95       	ror	r22
 6ee:	b7 95       	ror	r27
 6f0:	f7 95       	ror	r31
 6f2:	e7 95       	ror	r30
 6f4:	9f 5f       	subi	r25, 0xFF	; 255
 6f6:	c1 f7       	brne	.-16     	; 0x6e8 <__mulsf3_pse+0xa2>
 6f8:	fe 2b       	or	r31, r30
 6fa:	88 0f       	add	r24, r24
 6fc:	91 1d       	adc	r25, r1
 6fe:	96 95       	lsr	r25
 700:	87 95       	ror	r24
 702:	97 f9       	bld	r25, 7
 704:	08 95       	ret

00000706 <__udivmodsi4>:
 706:	a1 e2       	ldi	r26, 0x21	; 33
 708:	1a 2e       	mov	r1, r26
 70a:	aa 1b       	sub	r26, r26
 70c:	bb 1b       	sub	r27, r27
 70e:	fd 01       	movw	r30, r26
 710:	0d c0       	rjmp	.+26     	; 0x72c <__udivmodsi4_ep>

00000712 <__udivmodsi4_loop>:
 712:	aa 1f       	adc	r26, r26
 714:	bb 1f       	adc	r27, r27
 716:	ee 1f       	adc	r30, r30
 718:	ff 1f       	adc	r31, r31
 71a:	a2 17       	cp	r26, r18
 71c:	b3 07       	cpc	r27, r19
 71e:	e4 07       	cpc	r30, r20
 720:	f5 07       	cpc	r31, r21
 722:	20 f0       	brcs	.+8      	; 0x72c <__udivmodsi4_ep>
 724:	a2 1b       	sub	r26, r18
 726:	b3 0b       	sbc	r27, r19
 728:	e4 0b       	sbc	r30, r20
 72a:	f5 0b       	sbc	r31, r21

0000072c <__udivmodsi4_ep>:
 72c:	66 1f       	adc	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	88 1f       	adc	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	1a 94       	dec	r1
 736:	69 f7       	brne	.-38     	; 0x712 <__udivmodsi4_loop>
 738:	60 95       	com	r22
 73a:	70 95       	com	r23
 73c:	80 95       	com	r24
 73e:	90 95       	com	r25
 740:	9b 01       	movw	r18, r22
 742:	ac 01       	movw	r20, r24
 744:	bd 01       	movw	r22, r26
 746:	cf 01       	movw	r24, r30
 748:	08 95       	ret

0000074a <_exit>:
 74a:	f8 94       	cli

0000074c <__stop_program>:
 74c:	ff cf       	rjmp	.-2      	; 0x74c <__stop_program>
